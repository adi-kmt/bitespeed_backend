// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type LinkPrecedenceEnum string

const (
	LinkPrecedenceEnumPrimary   LinkPrecedenceEnum = "primary"
	LinkPrecedenceEnumSecondary LinkPrecedenceEnum = "secondary"
)

func (e *LinkPrecedenceEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LinkPrecedenceEnum(s)
	case string:
		*e = LinkPrecedenceEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for LinkPrecedenceEnum: %T", src)
	}
	return nil
}

type NullLinkPrecedenceEnum struct {
	LinkPrecedenceEnum LinkPrecedenceEnum `json:"link_precedence_enum"`
	Valid              bool               `json:"valid"` // Valid is true if LinkPrecedenceEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLinkPrecedenceEnum) Scan(value interface{}) error {
	if value == nil {
		ns.LinkPrecedenceEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LinkPrecedenceEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLinkPrecedenceEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LinkPrecedenceEnum), nil
}

type Contact struct {
	ID             int32              `json:"id"`
	Email          *string            `json:"email"`
	PhoneNumber    *string            `json:"phone_number"`
	LinkedID       *int32             `json:"linked_id"`
	LinkPrecedence LinkPrecedenceEnum `json:"link_precedence"`
	CreatedAt      pgtype.Timestamp   `json:"created_at"`
	UpdatedAt      pgtype.Timestamp   `json:"updated_at"`
	DeletedAt      pgtype.Timestamp   `json:"deleted_at"`
}
