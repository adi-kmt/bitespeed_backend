// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: db.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getContactInfoByEmailORPhone = `-- name: GetContactInfoByEmailORPhone :many
SELECT id, email, phone_number, linked_id, created_at
FROM contact
WHERE
    NULLIF($1, '') IS NULL OR email = NULLIF($1, '')
    OR
    NULLIF($2, '') IS NULL OR phone_number = NULLIF($2, '')
`

type GetContactInfoByEmailORPhoneParams struct {
	Column1 interface{} `json:"column_1"`
	Column2 interface{} `json:"column_2"`
}

type GetContactInfoByEmailORPhoneRow struct {
	ID          int32            `json:"id"`
	Email       *string          `json:"email"`
	PhoneNumber *string          `json:"phone_number"`
	LinkedID    *int32           `json:"linked_id"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetContactInfoByEmailORPhone(ctx context.Context, arg GetContactInfoByEmailORPhoneParams) ([]*GetContactInfoByEmailORPhoneRow, error) {
	rows, err := q.db.Query(ctx, getContactInfoByEmailORPhone, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetContactInfoByEmailORPhoneRow
	for rows.Next() {
		var i GetContactInfoByEmailORPhoneRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.PhoneNumber,
			&i.LinkedID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertContactInfo = `-- name: InsertContactInfo :one
INSERT INTO contact
    (email, phone_number, linked_id, link_precedence)
VALUES
    ($1, $2, $3, $4)
ON CONFLICT DO NOTHING
RETURNING id
`

type InsertContactInfoParams struct {
	Email          *string            `json:"email"`
	PhoneNumber    *string            `json:"phone_number"`
	LinkedID       *int32             `json:"linked_id"`
	LinkPrecedence LinkPrecedenceEnum `json:"link_precedence"`
}

func (q *Queries) InsertContactInfo(ctx context.Context, arg InsertContactInfoParams) (int32, error) {
	row := q.db.QueryRow(ctx, insertContactInfo,
		arg.Email,
		arg.PhoneNumber,
		arg.LinkedID,
		arg.LinkPrecedence,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateContactToSecondary = `-- name: UpdateContactToSecondary :one
UPDATE contact
SET linked_id = $1, link_precedence = 'secondary'
WHERE
    NULLIF($2, '') IS NULL OR email = NULLIF($2, '')
    OR
    NULLIF($3, '') IS NULL OR phone_number = NULLIF($3, '')
RETURNING id
`

type UpdateContactToSecondaryParams struct {
	LinkedID *int32      `json:"linked_id"`
	Column2  interface{} `json:"column_2"`
	Column3  interface{} `json:"column_3"`
}

func (q *Queries) UpdateContactToSecondary(ctx context.Context, arg UpdateContactToSecondaryParams) (int32, error) {
	row := q.db.QueryRow(ctx, updateContactToSecondary, arg.LinkedID, arg.Column2, arg.Column3)
	var id int32
	err := row.Scan(&id)
	return id, err
}
